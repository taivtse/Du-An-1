/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poly.app.ui.frames.quanly;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import poly.app.core.daoimpl.DoAnChiTietDaoImpl;
import poly.app.core.daoimpl.DoAnDaoImpl;
import poly.app.core.daoimpl.LoaiDoAnDaoImpl;
import poly.app.core.entities.DoAn;
import poly.app.core.entities.DoAnChiTiet;
import poly.app.core.entities.LoaiDoAn;
import poly.app.core.helper.DialogHelper;
import poly.app.ui.custom.ClosableTabbedPane;
import poly.app.ui.dialogs.capnhat.DialogCapNhatDoAn;
import poly.app.ui.dialogs.capnhat.DialogCapNhatDoAnChiTiet;
import poly.app.ui.dialogs.them.DialogThemDoAn;
import poly.app.ui.dialogs.them.DialogThemDoAnChiTiet;
import poly.app.ui.utils.TableRendererUtil;

/**
 *
 * @author vothanhtai
 */
public class FrameQLDoAn extends javax.swing.JFrame implements ClosableTabbedPane.ClosableTabbedPaneMethod {

    List<DoAn> listDoAn = new ArrayList<>();
    List<DoAnChiTiet> listDoAnCT = new ArrayList<>();
    Map<String, DoAn> mapDoAn = new TreeMap<>();
    ButtonGroup btngr = new ButtonGroup();
    ButtonGroup btnLDA = new ButtonGroup();

    /**
     * Creates new form FrameQLNhanVien
     */
    public FrameQLDoAn() {
        initComponents();
        setLocationRelativeTo(null);
        this.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        setTitle("Quản lý đồ ăn");
        this.setRadio();
        reRenderUI();
        this.loadDataToComboBox();
    }

    public void setRadio() {
        btngr.add(rdoDangDuocBan);
        btngr.add(rdoDaNgungBan);
        rdoDangDuocBan.setEnabled(false);
        rdoDaNgungBan.setEnabled(false);
        cboLoaiDoAn.setEnabled(false);
    }

    private void reRenderUI() {
        //        Render lại giao diện cho table
        TableRendererUtil tblRenderer = new TableRendererUtil(tblDoAn);
        tblRenderer.setCellEditable(false);
        tblRenderer.changeHeaderStyle();

        tblRenderer.setColoumnWidthByPersent(0, 5);
        tblRenderer.setColoumnWidthByPersent(1, 10);
        tblRenderer.setColoumnWidthByPersent(2, 30);
        tblRenderer.setColumnAlignment(0, TableRendererUtil.CELL_ALIGN_LEFT);
        tblRenderer.setColumnAlignment(1, TableRendererUtil.CELL_ALIGN_CENTER);

        tblRenderer = new TableRendererUtil(tblDoAnChiTiet);
        tblRenderer.setCellEditable(false);
        tblRenderer.changeHeaderStyle();
        tblRenderer.setColumnAlignment(1, TableRendererUtil.CELL_ALIGN_CENTER);
    }

    public JPanel getMainPanel() {
        synchronizedData();
        return this.pnlMain;
    }

    public void synchronizedData() {
        this.loadDataToTable();
        this.searchAdvanced();
        ((DefaultTableModel) tblDoAnChiTiet.getModel()).setRowCount(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlMain = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTraCuuDoAn = new javax.swing.JTextField();
        rdoDangDuocBan = new javax.swing.JRadioButton();
        rdoDaNgungBan = new javax.swing.JRadioButton();
        chkTheoTrangThai = new javax.swing.JCheckBox();
        chkTheoTen = new javax.swing.JCheckBox();
        chkTheoLoaiDoAn = new javax.swing.JCheckBox();
        cboLoaiDoAn = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnThemKichCo = new javax.swing.JButton();
        btnSuaKichCo = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoAn = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDoAnChiTiet = new javax.swing.JTable();
        btnCollapse = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Open Sans", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(52, 83, 104));
        jLabel1.setText("Tra cứu đồ ăn");

        txtTraCuuDoAn.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtTraCuuDoAn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTraCuuDoAnKeyReleased(evt);
            }
        });

        rdoDangDuocBan.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        rdoDangDuocBan.setSelected(true);
        rdoDangDuocBan.setText("Đang được bán");
        rdoDangDuocBan.setEnabled(false);
        rdoDangDuocBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoDangDuocBanActionPerformed(evt);
            }
        });

        rdoDaNgungBan.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        rdoDaNgungBan.setText("Đã ngưng bán");
        rdoDaNgungBan.setEnabled(false);
        rdoDaNgungBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoDaNgungBanActionPerformed(evt);
            }
        });

        chkTheoTrangThai.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        chkTheoTrangThai.setText("Theo trạng thái");
        chkTheoTrangThai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTheoTrangThaiActionPerformed(evt);
            }
        });

        chkTheoTen.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        chkTheoTen.setSelected(true);
        chkTheoTen.setText("Theo tên");
        chkTheoTen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTheoTenActionPerformed(evt);
            }
        });

        chkTheoLoaiDoAn.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        chkTheoLoaiDoAn.setText("Theo loại đồ ăn");
        chkTheoLoaiDoAn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTheoLoaiDoAnActionPerformed(evt);
            }
        });

        cboLoaiDoAn.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        cboLoaiDoAn.setEnabled(false);
        cboLoaiDoAn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboLoaiDoAnItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkTheoTen)
                            .addComponent(chkTheoTrangThai)
                            .addComponent(chkTheoLoaiDoAn)
                            .addComponent(rdoDangDuocBan)
                            .addComponent(rdoDaNgungBan))))
                .addGap(0, 125, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTraCuuDoAn)
                    .addComponent(cboLoaiDoAn, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addComponent(chkTheoTen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTraCuuDoAn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(chkTheoTrangThai)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdoDangDuocBan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdoDaNgungBan, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(chkTheoLoaiDoAn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboLoaiDoAn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(151, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setOpaque(false);

        btnThem.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        btnThem.setText("Thêm đồ ăn");
        btnThem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        btnSua.setText("Cập nhật đồ ăn");
        btnSua.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnThemKichCo.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        btnThemKichCo.setText("Thêm kích cỡ");
        btnThemKichCo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThemKichCo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemKichCoActionPerformed(evt);
            }
        });

        btnSuaKichCo.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        btnSuaKichCo.setText("Cập nhật kích cỡ");
        btnSuaKichCo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSuaKichCo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaKichCoActionPerformed(evt);
            }
        });

        btnXoa.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        btnXoa.setText("Xoá đồ ăn");
        btnXoa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnThem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSua)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnXoa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addComponent(btnThemKichCo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSuaKichCo)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThemKichCo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaKichCo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel5.setOpaque(false);
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(0, 0));

        tblDoAn.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        tblDoAn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã đồ ăn", "Tên đồ ăn", "Trạng  Thái", "Loại đồ ăn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDoAn.setGridColor(new java.awt.Color(238, 238, 238));
        tblDoAn.setRowHeight(22);
        tblDoAn.setSelectionBackground(new java.awt.Color(96, 116, 129));
        tblDoAn.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblDoAn.setShowHorizontalLines(false);
        tblDoAn.setShowVerticalLines(false);
        tblDoAn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoAnMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDoAn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        jPanel5.add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(0, 0));

        tblDoAnChiTiet.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        tblDoAnChiTiet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kích cỡ", "Đơn giá", "Trạng thái"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblDoAnChiTiet.setGridColor(new java.awt.Color(238, 238, 238));
        tblDoAnChiTiet.setRowHeight(22);
        tblDoAnChiTiet.setSelectionBackground(new java.awt.Color(96, 116, 129));
        tblDoAnChiTiet.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblDoAnChiTiet.setShowHorizontalLines(false);
        tblDoAnChiTiet.setShowVerticalLines(false);
        tblDoAnChiTiet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoAnChiTietMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDoAnChiTiet);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 10, 10);
        jPanel5.add(jScrollPane2, gridBagConstraints);

        btnCollapse.setBackground(new java.awt.Color(52, 83, 104));
        btnCollapse.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btnCollapse.setForeground(new java.awt.Color(255, 255, 255));
        btnCollapse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnCollapse.setText("<<");
        btnCollapse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCollapse.setOpaque(true);
        btnCollapse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnCollapseMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(btnCollapse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(btnCollapse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCollapseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCollapseMouseReleased
        if (btnCollapse.getText().equals("<<")) {
            jPanel2.setVisible(false);
            btnCollapse.setText(">>");
        } else {
            jPanel2.setVisible(true);
            btnCollapse.setText("<<");
        }
    }//GEN-LAST:event_btnCollapseMouseReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.loadDataToTable();
    }//GEN-LAST:event_formWindowOpened

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        int beforeInsertSize = mapDoAn.size();
        this.insertDA();
        this.loadDataToTable();
        DefaultTableModel model = (DefaultTableModel) tblDoAnChiTiet.getModel();
        model.setRowCount(0);

        if (beforeInsertSize != mapDoAn.size()) {
            int lastIndex = tblDoAn.getRowCount() - 1;
            tblDoAn.setRowSelectionInterval(lastIndex, lastIndex);
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void tblDoAnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoAnMouseClicked
        if (tblDoAn.getSelectedRow() >= 0) {
            if (evt.getClickCount() >= 2) {
                int index = tblDoAn.getSelectedRow();
                String maDA = (String) tblDoAn.getValueAt(index, 1);
                this.updateDA();
                this.loadDataToTable();
                this.searchAdvanced();
                for (int i = 0; i <= tblDoAn.getRowCount(); i++) {
                    if (tblDoAn.getValueAt(i, 1).equals(maDA)) {
                        tblDoAn.setRowSelectionInterval(i, i);
                        break;
                    }
                }
                this.loadDoAnChiTiet();
            }
            if (evt.getClickCount() == 1) {
                this.loadDoAnChiTiet();
            }
        }

    }//GEN-LAST:event_tblDoAnMouseClicked

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int index = tblDoAn.getSelectedRow();
        if (tblDoAn.getSelectedRow() < 0) {
            DialogHelper.message(this, "Chưa chọn đồ ăn để cập nhật !", DialogHelper.ERROR_MESSAGE);
        } else {
            String maDA = (String) tblDoAn.getValueAt(index, 1);
            this.updateDA();
            this.loadDataToTable();
            this.searchAdvanced();
            for (int i = 0; i <= tblDoAn.getRowCount(); i++) {
                if (tblDoAn.getValueAt(i, 1).equals(maDA)) {
                    tblDoAn.setRowSelectionInterval(i, i);
                    break;
                }
            }
            this.loadDoAnChiTiet();
        }

    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnSuaKichCoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaKichCoActionPerformed
        if (tblDoAnChiTiet.getSelectedRow() < 0) {
            DialogHelper.message(this, "Chưa chọn cỡ !", DialogHelper.ERROR_MESSAGE);
        } else {
            this.updateDACT();
            this.loadDoAnChiTiet();
        }
    }//GEN-LAST:event_btnSuaKichCoActionPerformed

    private void txtTraCuuDoAnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTraCuuDoAnKeyReleased
        if (txtTraCuuDoAn.getText().equals("")) {
            this.loadDataToTable();
        } else {
            this.searchAdvanced();
        }
    }//GEN-LAST:event_txtTraCuuDoAnKeyReleased

    private void btnThemKichCoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemKichCoActionPerformed
        this.insertDACT();
        this.loadDoAnChiTiet();
    }//GEN-LAST:event_btnThemKichCoActionPerformed

    private void tblDoAnChiTietMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoAnChiTietMouseClicked
        if (tblDoAnChiTiet.getSelectedRow() >= 0) {
            if (evt.getClickCount() >= 2) {
                this.updateDACT();
                this.loadDoAnChiTiet();
            }
        }
    }//GEN-LAST:event_tblDoAnChiTietMouseClicked

    private void rdoDangDuocBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoDangDuocBanActionPerformed
        this.searchAdvanced();
    }//GEN-LAST:event_rdoDangDuocBanActionPerformed

    private void rdoDaNgungBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoDaNgungBanActionPerformed
        this.searchAdvanced();
    }//GEN-LAST:event_rdoDaNgungBanActionPerformed

    private void chkTheoTenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTheoTenActionPerformed
        txtTraCuuDoAn.setText(null);
        this.checkBox();
        this.searchAdvanced();
    }//GEN-LAST:event_chkTheoTenActionPerformed

    private void chkTheoTrangThaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTheoTrangThaiActionPerformed
        this.checkBox();
        this.searchAdvanced();
    }//GEN-LAST:event_chkTheoTrangThaiActionPerformed

    private void chkTheoLoaiDoAnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTheoLoaiDoAnActionPerformed
        this.checkBox();
        this.searchAdvanced();
    }//GEN-LAST:event_chkTheoLoaiDoAnActionPerformed

    private void cboLoaiDoAnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboLoaiDoAnItemStateChanged
        this.searchAdvanced();
    }//GEN-LAST:event_cboLoaiDoAnItemStateChanged

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        if (tblDoAn.getSelectedRow() >= 0) {
            if (DialogHelper.confirm(this, "Bạn có chắc chắn muốn xoá?")) {
                String maDoAn = tblDoAn.getValueAt(tblDoAn.getSelectedRow(), 1).toString();
                DoAn doAn = mapDoAn.get(maDoAn);
                doAn.setDaXoa(true);
                try {
                    new DoAnDaoImpl().update(doAn);
                    
                    for (DoAnChiTiet doAnChiTiet : doAn.getDoAnChiTiets()) {
                        doAnChiTiet.setDangBan(false);
                        new DoAnChiTietDaoImpl().update(doAnChiTiet);
                    }
                    mapDoAn.remove(maDoAn);
                    ((DefaultTableModel)tblDoAnChiTiet.getModel()).setRowCount(0);
                    DialogHelper.message(this, "Xoá dữ liệu thành công!", DialogHelper.INFORMATION_MESSAGE);
                    this.searchAdvanced();
                } catch (Exception e) {
                    e.printStackTrace();
                    DialogHelper.message(this, "Xoá dữ liệu thất bại!", DialogHelper.ERROR_MESSAGE);
                }
            }
        } else {
            DialogHelper.message(this, "Chọn đồ ăn cần xoá", DialogHelper.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnXoaActionPerformed

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void checkBox() {
        txtTraCuuDoAn.setEnabled(chkTheoTen.isSelected());
        rdoDangDuocBan.setEnabled(chkTheoTrangThai.isSelected());
        rdoDaNgungBan.setEnabled(chkTheoTrangThai.isSelected());
        cboLoaiDoAn.setEnabled(chkTheoLoaiDoAn.isSelected());
    }

    public void loadDataToTable() {
        DefaultTableModel modelDA = (DefaultTableModel) tblDoAn.getModel();
        modelDA.setRowCount(0);
        DoAnDaoImpl doAnDao = new DoAnDaoImpl();
        listDoAn = doAnDao.getAll();
        int i = 1;
        for (DoAn fill : listDoAn) {
            Object[] record = new Object[]{
                i++,
                fill.getId(),
                fill.getTen(),
                fill.isDangBan() ? "Đang được bán" : "Đã ngưng bán",
                fill.getLoaiDoAn().getTen()
            };
            modelDA.addRow(record);
            mapDoAn.put(fill.getId(), fill);
        }
    }

    public void loadDoAnChiTiet() {
        int index = tblDoAn.getSelectedRow();
        String id = (String) tblDoAn.getValueAt(index, 1);
        DefaultTableModel modelDACT = (DefaultTableModel) tblDoAnChiTiet.getModel();
        modelDACT.setRowCount(0);

        DoAn doan = (DoAn) mapDoAn.get(id);
        Set<DoAnChiTiet> dact = doan.getDoAnChiTiets();

        List<DoAnChiTiet> dactList = dact.stream()
                .sorted(Comparator.comparing(DoAnChiTiet::getDonGia)) //comparator - how you want to sort it
                .collect(Collectors.toList());

        for (DoAnChiTiet fill : dactList) {
            Object[] record = new Object[]{
                fill.getKichCoDoAn().getTen(),
                new DecimalFormat("#,###,###").format(fill.getDonGia()),
                fill.isDangBan() ? "Đang được bán" : "Đã ngưng bán"
            };
            modelDACT.addRow(record);
        }
    }

    public void insertDA() {
        new DialogThemDoAn(this, true).setVisible(true);
    }

    public void updateDA() {
        int index = tblDoAn.getSelectedRow();
        if (tblDoAn.getSelectedRow() < 0) {
            DialogHelper.message(this, "Chưa chọn đồ ăn!", DialogHelper.ERROR_MESSAGE);
        }
        String idDA = (String) tblDoAn.getValueAt(index, 1);
        DoAn doAn = mapDoAn.get(idDA);
        new DialogCapNhatDoAn(this, true, doAn).setVisible(true);
        DefaultTableModel modelDACT = (DefaultTableModel) tblDoAnChiTiet.getModel();
        modelDACT.setRowCount(0);
    }

    public void searchAdvanced() {
        Map<String, DoAn> mapSearchDoAn = new TreeMap<>();
        DefaultTableModel modelDA = (DefaultTableModel) tblDoAn.getModel();
        modelDA.setRowCount(0);

        for (Entry<String, DoAn> entry : mapDoAn.entrySet()) {
            DoAn doAn = entry.getValue();

            if (!entry.getValue().getTen().toLowerCase().contains(txtTraCuuDoAn.getText().toLowerCase())) {
                continue;
            }

            if (chkTheoTrangThai.isSelected()) {
                if (rdoDangDuocBan.isSelected() && !doAn.isDangBan()) {
                    continue;
                } else if (rdoDaNgungBan.isSelected() && doAn.isDangBan()) {
                    continue;
                }
            }

            if (chkTheoLoaiDoAn.isSelected()) {
                if (!((LoaiDoAn) cboLoaiDoAn.getModel().getSelectedItem()).getId().equals(doAn.getLoaiDoAn().getId())) {
                    continue;
                }
            }

            mapSearchDoAn.put(doAn.getId(), doAn);
        }

        int i = 1;
        for (Entry<String, DoAn> entry : mapSearchDoAn.entrySet()) {
            DoAn doAn = entry.getValue();
            Object[] record = new Object[]{
                i++,
                doAn.getId(),
                doAn.getTen(),
                doAn.isDangBan() ? "Đang được bán" : "Đã ngưng bán",
                doAn.getLoaiDoAn().getTen()
            };
            modelDA.addRow(record);
        }
    }

    public void insertDACT() {
        if (tblDoAn.getSelectedRow() < 0) {
            DialogHelper.message(this, "Chưa chọn đồ ăn!", DialogHelper.ERROR_MESSAGE);
        } else {
            String idDA = (String) tblDoAn.getValueAt(tblDoAn.getSelectedRow(), 1);
            DoAn doAn = (DoAn) mapDoAn.get(idDA);
            new DialogThemDoAnChiTiet(this, true, doAn).setVisible(true);
        }

    }

    public void updateDACT() {
        int indexDA = tblDoAn.getSelectedRow();
        String idDA = (String) tblDoAn.getValueAt(indexDA, 1);
        int indexDACT = tblDoAnChiTiet.getSelectedRow();

        DoAn doan = (DoAn) mapDoAn.get(idDA);
        Set<DoAnChiTiet> setdoanchitiet = doan.getDoAnChiTiets();

        String dactTen = (String) tblDoAnChiTiet.getValueAt(indexDACT, 0);

        for (DoAnChiTiet item : setdoanchitiet) {
            if (item.getKichCoDoAn().getTen().equals(dactTen)) {
                DialogCapNhatDoAnChiTiet dialogCNDACT = new DialogCapNhatDoAnChiTiet(this, true, item, doan);
                dialogCNDACT.setVisible(true);
                break;
            }
        }
    }

    public void loadDataToComboBox() {
        DefaultComboBoxModel modelCBB = (DefaultComboBoxModel) cboLoaiDoAn.getModel();
        LoaiDoAnDaoImpl ldaDAO = new LoaiDoAnDaoImpl();
        List<LoaiDoAn> listLDA = ldaDAO.getAll();
        modelCBB.removeAllElements();
        for (LoaiDoAn fill : listLDA) {
            modelCBB.addElement(fill);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameQLDoAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameQLDoAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameQLDoAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameQLDoAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameQLDoAn().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnCollapse;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnSuaKichCo;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnThemKichCo;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cboLoaiDoAn;
    private javax.swing.JCheckBox chkTheoLoaiDoAn;
    private javax.swing.JCheckBox chkTheoTen;
    private javax.swing.JCheckBox chkTheoTrangThai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JRadioButton rdoDaNgungBan;
    private javax.swing.JRadioButton rdoDangDuocBan;
    private javax.swing.JTable tblDoAn;
    private javax.swing.JTable tblDoAnChiTiet;
    private javax.swing.JTextField txtTraCuuDoAn;
    // End of variables declaration//GEN-END:variables
}
